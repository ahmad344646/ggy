# heroku profitcentr
from apscheduler.schedulers.background import BackgroundScheduler
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.ui import Select
from selenium.webdriver.support import expected_conditions as EC
from github import Github
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
import time
import json
from bs4 import BeautifulSoup
import os
from flask import Flask
import threading
import random
import re
from googletrans import Translator
import sys
from io import StringIO
import random
import string
from skimage.metrics import structural_similarity
from skimage.io import imread
from skimage.color import rgb2gray
from skimage.transform import resize
import os



def generate_random_string(length=10):
    letters_and_digits = string.ascii_letters + string.digits
    return ''.join(random.choice(letters_and_digits) for _ in range(length))





def compare_to_folder(reference_img_path, folder_path):
    try:
        # Read and preprocess the reference image
        reference_image = imread(reference_img_path)[:,:,:3]
        reference_image_resized = resize(reference_image, (78, 78))
        reference_image_gray = rgb2gray(reference_image_resized)
        # Iterate through images in the specified folder
        matching_images = []
        for filename in os.listdir(folder_path):
            try:
                # Read and preprocess the current image in the folder
                current_image_path = os.path.join(folder_path, filename)
                current_image = imread(current_image_path)[:,:,:3]
                current_image_resized = resize(current_image, (78, 78))
                current_image_gray = rgb2gray(current_image_resized)
                # Calculate Structural Similarity Index (SSIM)
                ssim_value = structural_similarity(reference_image_gray, current_image_gray,
                                                   multichannel=True, gaussian_weights=True,
                                                   sigma=1.5, use_sample_covariance=False,
                                                   data_range=1.0)
                # Define a threshold for similarity (adjust as needed)
                similarity_threshold = 0.67
                # Check if the SSIM value is above the threshold
                if ssim_value > similarity_threshold:
                    matching_images.append((filename, ssim_value))
            except Exception as e:
                print(f"Error processing image {filename}: {str(e)}")
                continue
        return matching_images
    except Exception as e:
        print(f"Error: {str(e)}")
        return None
image_list_folder = "./image_list"
check_images_folder = "./check_images"




def running():
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    #options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36")
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options = Options()
    chrome_options.add_extension('./1.crx')
    # Use context manager to handle the WebDriver instance
    with webdriver.Chrome(options=chrome_options) as driver1:
        #driver1.set_window_size(800, 600)
        #driver1.minimize_window()
        driver1.get("https://www.google.com/")

        time.sleep(5)

        driver1.switch_to.window(driver1.window_handles[1])

        driver1.close()

        driver1.switch_to.window(driver1.window_handles[0])
        
        
        
        driver1.get("https://www.emailnator.com/")

        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'domain'))).click()
        
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'plusGmail'))).click()
        
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'googleMail'))).click()
                    
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div/main/div[1]/div/div/div/div[2]/div/div[5]/div/button'))).click()
        
        time.sleep(2)


        tedt = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div/main/div[1]/div/div/div/div[2]/div/div[1]/input')))
        
        email = tedt.get_attribute("value")

        # Print or use the input value as needed
        print("email:", email)


        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'goBtn'))).click()

        time.sleep(3)

        driver1.execute_script("window.open('', '_blank');")

        # Switch to the new tab
        driver1.switch_to.window(driver1.window_handles[1])

        driver1.get("https://www.blockaway.net/")
        new_window_size = {'width': 1520, 'height': 840}
        driver1.set_window_size(new_window_size['width'], new_window_size['height'])
        print("Please wait...")
        time.sleep(1)
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'url'))).send_keys("https://profitcentr.com/register")
        
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="requestSubmit"]'))).click()
        
        
        
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'username'))).send_keys(generate_random_string())
        

        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'email'))).send_keys(email)
        
        def checking():
            try:
                df = WebDriverWait(driver1, 2).until(
                            EC.presence_of_element_located((By.XPATH, '//*[@id="register-form"]/button/span')))
                return "yes"
            except:
                return "no"
        while checking() == "yes":
            try:
                input_string = WebDriverWait(driver1, 10).until(       
                    EC.presence_of_element_located((By.XPATH, '//*[@id="register-form"]/table/tbody/tr[7]/td/div/div'))).text
                words = input_string.split()
                input_text = words[-1]
                print(input_text)
                translator = Translator()
                translation = translator.translate(str(input_text), dest="en")
                translated_text = translation.text
                print(translated_text)
                dfs = WebDriverWait(driver1, 10).until(                
                    EC.presence_of_element_located((By.XPATH, '//*[@id="register-form"]/table/tbody/tr[7]/td/div/label[1]')))
                dfs.screenshot(f"./check_images/1.jpg")
                dfs1 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="register-form"]/table/tbody/tr[7]/td/div/label[2]')))
                dfs1.screenshot(f"./check_images/2.jpg")
                dfs2 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="register-form"]/table/tbody/tr[7]/td/div/label[3]')))
                dfs2.screenshot(f"./check_images/3.jpg")
                dfs3 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="register-form"]/table/tbody/tr[7]/td/div/label[4]')))
                dfs3.screenshot(f"./check_images/4.jpg")
                dfs4 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="register-form"]/table/tbody/tr[7]/td/div/label[5]')))
                dfs4.screenshot(f"./check_images/5.jpg")
                dfs5 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="register-form"]/table/tbody/tr[7]/td/div/label[6]')))
                dfs5.screenshot(f"./check_images/6.jpg")


                i=1
                j=20
                while i<j:
                    image_name_input = f"{translated_text}[{i}].jpg"
                    # Check if the image exists in "image_list" folder
                    image_list_path = os.path.join(image_list_folder, image_name_input)
                    if os.path.exists(image_list_path):
                        matching_images = compare_to_folder(image_list_path, check_images_folder)
                        if matching_images is not None and len(matching_images) > 0:
                            print("Matching images found:")
                            for image_info in matching_images:
                                print(f"Filename: {image_info[0]}, Similarity Score: {image_info[1]}")
                                inpdut_string = image_info[0]
                                result_string = inpdut_string[:-4]
                                print(result_string)
                                WebDriverWait(driver1, 10).until(
                                    EC.presence_of_element_located((By.XPATH, f'//*[@id="register-form"]/table/tbody/tr[7]/td/div/label[{result_string}]'))).click()
                        else:
                            print("No matching images found in the 'check_images' folder.")
                    else:
                        print(f"The image '{image_name_input}' does not exist in the 'image_list' folder.")
                    i=i+1

                print("ok")
                WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="register-form"]/button/span'))).click()
                time.sleep(8)
            except:
                pass

        driver1.switch_to.window(driver1.window_handles[0])
        time.sleep(2)
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'reload'))).click()
        
        time.sleep(10)

        WebDriverWait(driver1, 30).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div/section/div/div/div[3]/div/div[2]/div[2]/div/table/tbody/tr[2]/td/a/table/tbody/tr'))).click()
        
        time.sleep(2)

        driver1.execute_script("window.scrollBy(0, 70);")
        time.sleep(0.5)
        driver1.execute_script("window.scrollBy(0, 70);")

        email_text = WebDriverWait(driver1, 120).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div/section/div/div/div[3]/div/div/div[2]/div/div'))).text
        
        username_match = re.search(r'Ваш логин для входа: (\S+)', email_text)
        password_match = re.search(r'Ваш пароль для входа: (\S+)', email_text)
        linkk = re.search(r'Для активации аккаунта, пройдите по ссылке ниже:\s*(\S+)', email_text)
        
        username = username_match.group(1)
        password = password_match.group(1)
        link = linkk.group(1)
        driver1.switch_to.window(driver1.window_handles[1])
        print(link)
        driver1.get(str(link))

        driver1.execute_script("window.scrollBy(0, 70);")

        time.sleep(1)






        def checking1():
            try:
                df = WebDriverWait(driver1, 2).until(
                            EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[5]/td/div/label[1]')))
                return "yes"
            except:
                return "no"
        while checking1() == "yes":
            try:
                input_string = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[5]/td/div/div'))).text
                words = input_string.split()
                input_text = words[-1]
                print(input_text)
                translator = Translator()
                translation = translator.translate(str(input_text), dest="en")
                translated_text = translation.text
                print(translated_text)
                dfs = WebDriverWait(driver1, 10).until(                            
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[5]/td/div/label[1]')))
                dfs.screenshot(f"./check_images/1.jpg")
                dfs1 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[5]/td/div/label[2]')))
                dfs1.screenshot(f"./check_images/2.jpg")
                dfs2 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[5]/td/div/label[3]')))
                dfs2.screenshot(f"./check_images/3.jpg")
                dfs3 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[5]/td/div/label[4]')))
                dfs3.screenshot(f"./check_images/4.jpg")
                dfs4 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[5]/td/div/label[5]')))
                dfs4.screenshot(f"./check_images/5.jpg")
                dfs5 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[5]/td/div/label[6]')))
                dfs5.screenshot(f"./check_images/6.jpg")

                i=1
                j=20
                while i<j:
                    image_name_input = f"{translated_text}[{i}].jpg"
                    # Check if the image exists in "image_list" folder
                    image_list_path = os.path.join(image_list_folder, image_name_input)
                    if os.path.exists(image_list_path):
                        matching_images = compare_to_folder(image_list_path, check_images_folder)
                        if matching_images is not None and len(matching_images) > 0:
                            print("Matching images found:")
                            for image_info in matching_images:
                                print(f"Filename: {image_info[0]}, Similarity Score: {image_info[1]}")
                                inpdut_string = image_info[0]
                                result_string = inpdut_string[:-4]
                                print(result_string)
                                WebDriverWait(driver1, 10).until(
                                    EC.presence_of_element_located((By.XPATH, f'//*[@id="login-form"]/table/tbody/tr[5]/td/div/label[{result_string}]'))).click()
                        else:
                            print("No matching images found in the 'check_images' folder.")
                    else:
                        print(f"The image '{image_name_input}' does not exist in the 'image_list' folder.")
                    i=i+1
                                         
                print("ok")

                WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/button/span'))).click()
                time.sleep(8)

            except:
                pass


        driver1.get("https://profitcentr.com/login")


        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'username'))).send_keys(username)
        
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'password'))).send_keys(password)
        
        time.sleep(1)

        
        def checking2():
            try:
                df = WebDriverWait(driver1, 2).until(
                            EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/div')))
                return "yes"
            except:
                return "no"
        while checking2() == "yes":
            try:
                input_string = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/div'))).text
                words = input_string.split()
                input_text = words[-1]
                print(input_text)
                translator = Translator()
                translation = translator.translate(str(input_text), dest="en")
                translated_text = translation.text
                print(translated_text)
                dfs = WebDriverWait(driver1, 10).until(                
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[1]')))
                dfs.screenshot(f"./check_images/1.jpg")
                dfs1 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[2]')))
                dfs1.screenshot(f"./check_images/2.jpg")
                dfs2 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[3]')))
                dfs2.screenshot(f"./check_images/3.jpg")
                dfs3 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[4]')))
                dfs3.screenshot(f"./check_images/4.jpg")
                dfs4 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[5]')))
                dfs4.screenshot(f"./check_images/5.jpg")
                dfs5 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[6]')))
                dfs5.screenshot(f"./check_images/6.jpg")
        
           
                i=1
                j=20
                while i<j:
                    image_name_input = f"{translated_text}[{i}].jpg"
                    # Check if the image exists in "image_list" folder
                    image_list_path = os.path.join(image_list_folder, image_name_input)
                    if os.path.exists(image_list_path):
                        matching_images = compare_to_folder(image_list_path, check_images_folder)
                        if matching_images is not None and len(matching_images) > 0:
                            print("Matching images found:")
                            for image_info in matching_images:
                                print(f"Filename: {image_info[0]}, Similarity Score: {image_info[1]}")
                                inpdut_string = image_info[0]
                                result_string = inpdut_string[:-4]
                                print(result_string)
                                WebDriverWait(driver1, 10).until(
                                    EC.presence_of_element_located((By.XPATH, f'//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[{result_string}]'))).click()
                        else:
                            print("No matching images found in the 'check_images' folder.")
                    else:
                        print(f"The image '{image_name_input}' does not exist in the 'image_list' folder.")
                    i=i+1

                WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/button/span'))).click()
                time.sleep(8)
            except:
                pass

        
        time.sleep(5)
        WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.XPATH, '//*[@id="DivImg"]/a'))).click()
        
        WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.XPATH, '//*[@id="mnu_title1"]'))).click()
        
        time.sleep(1)

        driver1.get("https://profitcentr.com/profile")

        time.sleep(2)

        driver1.get("https://profitcentr.com/profile")

        
      
        
        time.sleep(1)
        

        WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.NAME, 'fio'))).send_keys(username)
        
        time.sleep(0.5)
        dropdown = Select(WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.NAME, 'sex'))))
        dropdown.select_by_value("2")
        
        time.sleep(0.5)
        dropdown1 = Select(WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.NAME, 'db_d'))))
        dropdown1.select_by_value("2")
        
        time.sleep(0.5)
        dropdown2 = Select(WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.NAME, 'db_m'))))
        dropdown2.select_by_value("2")
        
        time.sleep(0.5)
        dropdown3 = Select(WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.NAME, 'db_y'))))
        dropdown3.select_by_value("2008")
        
        time.sleep(0.5)

        WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.XPATH, '//*[@id="maincolumn"]/div/form[1]/table/tbody/tr[6]/td/center/input'))).click()
        

        time.sleep(1)

        WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.XPATH, '//*[@id="pin-profil"]/center/form/input[1]'))).click()
        

        time.sleep(1)

        driver1.switch_to.window(driver1.window_handles[0])

        time.sleep(1)

        WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div/section/div/div/div[3]/nav/ol/li[2]/a'))).click()
        
        time.sleep(5)
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'reload'))).click()
        time.sleep(9)
        WebDriverWait(driver1, 30).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div/section/div/div/div[3]/div/div[2]/div[2]/div/table/tbody/tr[2]/td/a/table/tbody/tr'))).click()
        time.sleep(2)
        driver1.execute_script("window.scrollBy(0, 70);")
        time.sleep(0.5)
        driver1.execute_script("window.scrollBy(0, 70);")

        picc = WebDriverWait(driver1, 120).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="root"]/div/section/div/div/div[3]/div/div/div[2]/div/div'))).text
        
        print(picc)

        pin_match = re.search(r'PIN-код: (\d+)', picc)
        pin_code = pin_match.group(1)

        
        driver1.get("https://payeer.com/en/auth/?register=yes")
        payer_email = f"chahmadhassanjee+{generate_random_string()}@gmail.com"
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'email'))).send_keys(payer_email)
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-step1"]/div/div[2]/form/button[2]'))).click()
        time.sleep(5)
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '/html/body/div[2]/main/div[2]/div/div[2]/form/button[3]'))).click()       
        time.sleep(2)
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'new_password'))).clear()     
        WebDriverWait(driver1, 10).until(
                 EC.presence_of_element_located((By.NAME, 'new_password2'))).clear()     
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'secret_word'))).clear()     
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'new_password'))).send_keys("ahmaD4764346@")     
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'new_password2'))).send_keys("ahmaD4764346@")      
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'secret_word'))).send_keys("3530101")
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '/html/body/div[2]/main/div/div[2]/form/button[2]'))).click()      
        time.sleep(2)
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'name'))).send_keys("ahmad")      
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'last_name'))).send_keys("hassan")      
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '/html/body/div[2]/main/div/div[2]/form/div[7]/div/div[1]/div[1]'))).click()       
        time.sleep(1)
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '/html/body/div[2]/main/div/div[2]/form/div[7]/div/div[2]/ul/li[3]'))).click()
        time.sleep(1)
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '/html/body/div[2]/main/div/div[2]/form/button[2]'))).click()

        time.sleep(5)

        payeer_account = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="pjax-container"]/div/div[1]/div/div[2]/div/div[1]/div[2]'))).text
        print(payeer_account)
        
        key = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="pjax-container"]/div/div[1]/div/div[2]/div/div[4]/div[2]'))).text
        
        print(key)
        
        





        driver1.switch_to.window(driver1.window_handles[1])

        time.sleep(2)
        


        #payer wallet
        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.NAME, 'payeer'))).send_keys(payeer_account)

        WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="profile-payeer"]/form/input[2]'))).send_keys(pin_code)
        
        time.sleep(2)
        actions = webdriver.ActionChains(driver1)
        actions.send_keys(Keys.ENTER)
        actions.perform()
        time.sleep(2)

    

        driver1.get("https://profitcentr.com/members")
        cookies = driver1.get_cookies()
        for cookie in cookies:
            if 'expiry' in cookie:
                del cookie['expiry']
        cookie_name = generate_random_string()
        new = f"./{cookie_name}.json"
        with open(new, 'w') as f:
            json.dump(cookies, f)

        print("Cookies copied successfully..")

        with open("accounts.txt" ,'a') as e:
            e.write(f"payeer_account: {payeer_account}\npayeer_email: {payer_email}\nKey: {key}\nUsername: {username}\nPassword: {password}\nEmail_link: https://www.emailnator.com/inbox/#{email}\nCookies_Name: {cookie_name}\n....................")
        print("ok")

        time.sleep(1111)



running()