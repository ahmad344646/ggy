import os
import re
import random
import shutil
from skimage.metrics import structural_similarity
from skimage.io import imread
from skimage.color import rgb2gray
from skimage.transform import resize

def get_last_car_number(image_list_folder):
    car_numbers = []
    
    # Iterate through images in the "image_list" folder
    for image_name in os.listdir(image_list_folder):
        match = re.match(r'flowers\[(\d+)\]', image_name)
        if match:
            car_numbers.append(int(match.group(1)))

    # Find the last car number or return 0 if none found
    return max(car_numbers, default=0)

def compare_and_copy_images(check_images_folder, image_list_folder):
    try:
        # Iterate through images in the "check_images" folder
        for check_image_name in os.listdir(check_images_folder):
            try:
                # Read and preprocess the current image in the "check_images" folder
                check_image_path = os.path.join(check_images_folder, check_image_name)
                check_image = imread(check_image_path)[:,:,:3]
                check_image_resized = resize(check_image, (78, 78))
                check_image_gray = rgb2gray(check_image_resized)

                # Flag to determine if there is a match in "image_list"
                match_found = False

                # Iterate through images in the "image_list" folder
                for image_name in os.listdir(image_list_folder):
                    try:
                        # Read and preprocess the current image in the "image_list" folder
                        image_path = os.path.join(image_list_folder, image_name)
                        image = imread(image_path)[:,:,:3]
                        image_resized = resize(image, (78, 78))
                        image_gray = rgb2gray(image_resized)

                        # Calculate Structural Similarity Index (SSIM)
                        ssim_value = structural_similarity(check_image_gray, image_gray,
                                                           multichannel=True, gaussian_weights=True,
                                                           sigma=1.5, use_sample_covariance=False,
                                                           data_range=1.0)

                        # Define a threshold for similarity (adjust as needed)
                        similarity_threshold = 0.3

                        # Check if the SSIM value is above the threshold
                        if ssim_value > similarity_threshold:
                            match_found = True
                            break

                    except Exception as e:
                        print(f"Error processing image {image_name}: {str(e)}")
                        continue

                # If no match is found, copy the image to "image_list" with the next available number
                if not match_found:
                    last_car_number = get_last_car_number(image_list_folder)
                    next_car_number = last_car_number + 1
                    new_image_name = f"flowers[{next_car_number}].jpg"
                    new_image_path = os.path.join(image_list_folder, new_image_name)
                    shutil.copy(check_image_path, new_image_path)

            except Exception as e:
                print(f"Error processing image {check_image_name}: {str(e)}")
                continue

    except Exception as e:
        print(f"Error: {str(e)}")

# Example usage:
check_images_folder = "./check_images"
image_list_folder = "./image_list"

compare_and_copy_images(check_images_folder, image_list_folder)
