from skimage.metrics import structural_similarity
from skimage.io import imread
from skimage.color import rgb2gray
from skimage.transform import resize
import os

def compare_to_folder(reference_img_path, folder_path):
    try:
        # Read and preprocess the reference image
        reference_image = imread(reference_img_path)[:,:,:3]
        reference_image_resized = resize(reference_image, (78, 78))
        reference_image_gray = rgb2gray(reference_image_resized)

        # Iterate through images in the specified folder
        matching_images = []

        for filename in os.listdir(folder_path):
            try:
                # Read and preprocess the current image in the folder
                current_image_path = os.path.join(folder_path, filename)
                current_image = imread(current_image_path)[:,:,:3]
                current_image_resized = resize(current_image, (78, 78))
                current_image_gray = rgb2gray(current_image_resized)

                # Calculate Structural Similarity Index (SSIM)
                ssim_value = structural_similarity(reference_image_gray, current_image_gray,
                                                   multichannel=True, gaussian_weights=True,
                                                   sigma=1.5, use_sample_covariance=False,
                                                   data_range=1.0)

                # Define a threshold for similarity (adjust as needed)
                similarity_threshold = 0.1

                # Check if the SSIM value is above the threshold
                if ssim_value > similarity_threshold:
                    matching_images.append((filename, ssim_value))

            except Exception as e:
                print(f"Error processing image {filename}: {str(e)}")
                continue

        return matching_images

    except Exception as e:
        print(f"Error: {str(e)}")
        return None

# Example usage:
# Replace "path/to/image_list" and "path/to/check_images" with your actual paths
image_list_folder = "./image_list"
check_images_folder = "./check_images"

# Take image name as input


i=1
j=50
while i<3:
    image_name_input = f"car[{i}].jpg"
    # Check if the image exists in "image_list" folder
    image_list_path = os.path.join(image_list_folder, image_name_input)
    if os.path.exists(image_list_path):
        matching_images = compare_to_folder(image_list_path, check_images_folder)

        if matching_images is not None and len(matching_images) > 0:
            print("Matching images found:")
            for image_info in matching_images:
                print(f"Filename: {image_info[0]}, Similarity Score: {image_info[1]}")
        else:
            print("No matching images found in the 'check_images' folder.")
    else:
        print(f"The image '{image_name_input}' does not exist in the 'image_list' folder.")
    i=i+1