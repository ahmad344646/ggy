# heroku profitcentr
from apscheduler.schedulers.background import BackgroundScheduler
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from github import Github
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
import time
import json
from bs4 import BeautifulSoup
import os
from flask import Flask
import threading
import random
import re
from googletrans import Translator
import sys
from io import StringIO
import random
import string


def translate_text(text):
    translator = Translator()
    translation = translator.translate(text, dest="en")
    return translation.text


def generate_random_string(length=10):
    letters_and_digits = string.ascii_letters + string.digits
    return ''.join(random.choice(letters_and_digits) for _ in range(length))

def running():

    chrome_options = Options()
    chrome_options.add_argument('--headless')
    
    #options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36")
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    
    # Use context manager to handle the WebDriver instance
    with webdriver.Chrome(options=chrome_options) as driver1:
        #driver1.set_window_size(800, 600)
        #driver1.minimize_window()
        driver1.get("https://profitcentr.com/login")
        new_window_size = {'width': 1552, 'height': 840}
        driver1.set_window_size(new_window_size['width'], new_window_size['height'])
        print("Please wait...")
        time.sleep(1)

        
        dfs = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[1]')))
        dfs.screenshot(f"./image_list/{generate_random_string()}.jpg")


        dfs1 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[2]')))
        dfs1.screenshot(f"./image_list/{generate_random_string()}.jpg")


        dfs2 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[3]')))
        dfs2.screenshot(f"./image_list/{generate_random_string()}.jpg")


        dfs3 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[4]')))
        dfs3.screenshot(f"./image_list/{generate_random_string()}.jpg")

        dfs4 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[5]')))
        dfs4.screenshot(f"./image_list/{generate_random_string()}.jpg")

        dfs5 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[6]')))
        dfs5.screenshot(f"./image_list/{generate_random_string()}.jpg")


        driver1.quit()


running()
       