# heroku profitcentr
from apscheduler.schedulers.background import BackgroundScheduler
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from github import Github
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
import time
import json
from bs4 import BeautifulSoup
import os
from flask import Flask
import threading
import random
import re
from googletrans import Translator
import sys
from io import StringIO
import random
import string
from skimage.metrics import structural_similarity
from skimage.io import imread
from skimage.color import rgb2gray
from skimage.transform import resize
import os



def generate_random_string(length=10):
    letters_and_digits = string.ascii_letters + string.digits
    return ''.join(random.choice(letters_and_digits) for _ in range(length))





def compare_to_folder(reference_img_path, folder_path):
    try:
        # Read and preprocess the reference image
        reference_image = imread(reference_img_path)[:,:,:3]
        reference_image_resized = resize(reference_image, (78, 78))
        reference_image_gray = rgb2gray(reference_image_resized)
        # Iterate through images in the specified folder
        matching_images = []
        for filename in os.listdir(folder_path):
            try:
                # Read and preprocess the current image in the folder
                current_image_path = os.path.join(folder_path, filename)
                current_image = imread(current_image_path)[:,:,:3]
                current_image_resized = resize(current_image, (78, 78))
                current_image_gray = rgb2gray(current_image_resized)
                # Calculate Structural Similarity Index (SSIM)
                ssim_value = structural_similarity(reference_image_gray, current_image_gray,
                                                   multichannel=True, gaussian_weights=True,
                                                   sigma=1.5, use_sample_covariance=False,
                                                   data_range=1.0)
                # Define a threshold for similarity (adjust as needed)
                similarity_threshold = 0.3
                # Check if the SSIM value is above the threshold
                if ssim_value > similarity_threshold:
                    matching_images.append((filename, ssim_value))
            except Exception as e:
                print(f"Error processing image {filename}: {str(e)}")
                continue
        return matching_images
    except Exception as e:
        print(f"Error: {str(e)}")
        return None
image_list_folder = "./image_list"
check_images_folder = "./check_images"




def running():

    chrome_options = Options()
    chrome_options.add_argument('--headless')
    #options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36")
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    # Use context manager to handle the WebDriver instance
    with webdriver.Chrome(options=chrome_options) as driver1:
        #driver1.set_window_size(800, 600)
        #driver1.minimize_window()
        driver1.get("https://profitcentr.com/login")
        new_window_size = {'width': 1552, 'height': 840}
        driver1.set_window_size(new_window_size['width'], new_window_size['height'])
        print("Please wait...")
        time.sleep(1)



        input_string = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/div'))).text
        words = input_string.split()
        input_text = words[-1]
        print(input_text)
        translator = Translator()
        translation = translator.translate(str(input_text), dest="en")
        translated_text = translation.text
        print(translated_text)
        dfs = WebDriverWait(driver1, 10).until(                
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[1]')))
        dfs.screenshot(f"./check_images/1.jpg")
        dfs1 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[2]')))
        dfs1.screenshot(f"./check_images/2.jpg")
        dfs2 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[3]')))
        dfs2.screenshot(f"./check_images/3.jpg")
        dfs3 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[4]')))
        dfs3.screenshot(f"./check_images/4.jpg")
        dfs4 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[5]')))
        dfs4.screenshot(f"./check_images/5.jpg")
        dfs5 = WebDriverWait(driver1, 10).until(
                    EC.presence_of_element_located((By.XPATH, '//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[6]')))
        dfs5.screenshot(f"./check_images/6.jpg")

        i=1
        j=20
        while i<j:
            image_name_input = f"{translated_text}[{i}].jpg"
            # Check if the image exists in "image_list" folder
            image_list_path = os.path.join(image_list_folder, image_name_input)
            if os.path.exists(image_list_path):
                matching_images = compare_to_folder(image_list_path, check_images_folder)
                if matching_images is not None and len(matching_images) > 0:
                    print("Matching images found:")
                    for image_info in matching_images:
                        print(f"Filename: {image_info[0]}, Similarity Score: {image_info[1]}")
                        inpdut_string = image_info[0]
                        result_string = inpdut_string[:-4]
                        print(result_string)
                        WebDriverWait(driver1, 10).until(
                            EC.presence_of_element_located((By.XPATH, f'//*[@id="login-form"]/table/tbody/tr[3]/td/div/label[{result_string}]'))).click()
                else:
                    print("No matching images found in the 'check_images' folder.")
            else:
                print(f"The image '{image_name_input}' does not exist in the 'image_list' folder.")
            i=i+1
                                         
        print("ok")

        time.sleep(222)
        driver1.quit()


running()
       